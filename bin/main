#!/usr/bin/env php
<?php

use lib\storage\Redis;

define('APP_PATH', realpath(__DIR__ . '/../') . '/');
require APP_PATH . 'vendor/autoload.php';

if (isset($argv[1]) && $argv[1] == "-c" && isset($argv[2])) {
    $config = require $argv[2];
} else {
    $config = require APP_PATH . 'conf/config.php';
}

spl_autoload_register(function ($className) use ($config) {
    $classPath = $config['app_directory'] . DIRECTORY_SEPARATOR . str_replace('\\', DIRECTORY_SEPARATOR,
            $className) . '.php';
    require $classPath;
}, true);

$config = require APP_PATH . 'conf/config.php';
$wsConfig = $config['ws_server'];
new linger\framework\Application($config);

$server = new swoole\websocket\Server($wsConfig['host'], $wsConfig['port']);

$server->on('open', function (swoole\websocket\Server $server, $request) {
    echo "server: handshake success with fd{$request->fd}\n";
});

function notifyOnlieStatus(swoole\websocket\Server $server, $uid, $status)
{
    try {
        $db = \lib\storage\Db::instance('im_slave');
        $userService = new service\User($db);
        $friends = $userService->getAllFriends($uid);
        $redis = Redis::instance('queue');
        foreach ($friends as $friend) {
            $fd = $redis->hGet('user_info', $friend['id']);
            if ($fd > 0) {
                $server->push($fd, [
                    'action' => 'friend_online_status',
                    'uid'    => $friend['id'],
                ]);
            }
        }
    } catch (Exception $exception) {
        echo $exception;
    }
}

function createMessage($message)
{
    try {
        $db = \lib\storage\Db::instance('im_master');
        $messageService = new \service\Message($db);
        $messageService->create($message);
    } catch (Exception $exception) {
        echo $exception;
    }
}

function sessionGetById($sessionId)
{
    try {
        $redis = Redis::instance('session');
        $session = $redis->get('PHPREDIS_SESSION:' . $sessionId);
        $redis->close();
        return unserialize($session);
    } catch (Exception $exception) {
        ;;
    }
    return false;
}

function sendMessage(swoole\websocket\Server $server, $data)
{
    try {
        $redis = Redis::instance('queue');
        $message = [
            'action'        => 'chat',
            'type'          => $data['data']['to']['type'],
            'from_id'       => $data['data']['mine']['id'],
            'from_username' => $data['data']['mine']['username'],
            'avatar'        => $data['data']['mine']['avatar'],
            'content'       => $data['data']['mine']['content'],
            'message_time'  => time(),
        ];

        if ($data['data']['to']['type'] === 'group') {
            $message['group_id'] = $data['data']['to']['id'];
            $db = \lib\storage\Db::instance('im_slave');
            $user = new \service\User($db);
            $members = $user->getMembers($data['data']['to']['id']);
            if (!empty($members['list'])) {
                foreach ($members['list'] as $member) {
                    if ($member['uid'] == $data['data']['mine']['id']) {
                        continue;
                    }
                    $userInfo = $redis->hGet('user_info', $member['uid']);
                    $userInfo = json_decode($userInfo, true);
                    //如果对方用户在线，则推送消息
                    if (!empty($userInfo) && !empty($userInfo['fd'])) {
                        if ($server->push($userInfo['fd'], json_encode($message))) {
                            $message['is_pushed'] = 1;
                        }
                    }
                    $message['to_id'] = $member['uid'];
                    //消息入库
                    createMessage($message);
                }
            }
            $redis->close();
        } else {
            $userInfo = $redis->hGet('user_info', $data['data']['to']['id']);
            $userInfo = json_decode($userInfo, true);
            $redis->close();

            //如果对方用户在线，则推送消息
            if (!empty($userInfo) && !empty($userInfo['fd'])) {
                if ($server->push($userInfo['fd'], json_encode($message))) {
                    $message['is_pushed'] = 1;
                }
            }
            $message['to_id'] = $data['data']['to']['id'];
            //消息入库
            createMessage($message);
        }
    } catch (Exception $exception) {
        echo $exception;
    }
}

$server->on('message', function (swoole\websocket\Server $server, $frame) {
    echo "receive from {$frame->fd}:{$frame->data},opcode:{$frame->opcode},fin:{$frame->finish}\n";
    $data = json_decode($frame->data, true);
    $sessionId = $data['data']['sessionId'];
    $session = sessionGetById($sessionId);
    if (empty($session) || empty($session['uid'])) {
        $server->push($frame->fd, json_encode(['action' => 'login', 'code' => '1000', 'msg' => '请登录']));
    } else {
        switch ($data['action']) {
            case 'open':
                $redis = Redis::instance('queue');
                $redis->hSet('user_info', $session['uid'], json_encode(['fd' => $frame->fd, 'status' => 'online']));
                $redis->hSet('fd_user_map', $frame->fd, $session['uid']);
                $redis->close();
                //TODO 通知好友上线了
                break;
            case 'chat':
                sendMessage($server, $data);
                break;
        }
    }
});

$server->on('close', function ($ser, $fd) use ($server) {
    $redis = Redis::instance('queue');
    $userId = $redis->hGet('fd_user_map', $fd);
    $redis->hDel('user_info', $userId);
    $redis->hDel('fd_user_map', $fd);
    $redis->close();
    echo "client {$fd} closed\n";
});

$server->start();